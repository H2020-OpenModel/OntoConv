---
steps:

  - workflow: execflow.oteapipipeline
    inputs:
      pipeline:
        $ref: file:__DIR__/../2_ontoconv/generated_pipeline_3.yaml
      run_pipeline: pipe
      from_cuds:
        - YieldStrength_function_4_file
        - TabulatedElastoPlastic_function_3_file
    postprocess:
      # NB! it is imprtant that the right file is passed to the right input
      # this could be random...
      - "{{ ctx.current.outputs.results['YieldStrength_function_4_file']|to_ctx('ctx_pipeline3_file1') }}"
      - "{{ ctx.current.outputs.results['TabulatedElastoPlastic_function_3_file']|to_ctx('ctx_pipeline3_file2') }}"

  - workflow: execflow.exec_wrapper
    inputs:
      command: "python"
      arguments:
        - "-m"
        - "ss3_wrappers.material_card_generator"
        - "--infile"
        - "{yieldstressfile}"
        - "--template-file" # Needs scheme to use local file if pipeline has done the download and execflow has passed the file to the local node
        - "{templatefile}" #should be passed via the pipeline
        - "-d"
        - "json"
        - "generated_material_card.json"
      files:
        # Note to Louis!! For some reason the exec_wrapper needs an input file.
        yieldstressfile:
          node: "{{ ctx.ctx_pipeline3_file1 }}"
          filename: "yieldstress-input.txt" # Should be able to detect which file it is from ontology/worfklow
        templatefile:
          node: "{{ ctx.ctx_pipeline3_file2 }}"
          filename: "tabulated_elasto_plastic.json"
      outputs:
        - "generated_material_card.json"
    postprocess:
      # the identifier of the output is defined in the documentation.
      - "{{ ctx.current.outputs['generated_material_card_json']|to_ctx('AluminiumMaterialCard_aiida_datanode') }}"

  - workflow: execflow.oteapipipeline
    inputs:
      pipeline:
        $ref: file:__DIR__/../2_ontoconv/generated_pipeline_2.yaml
      run_pipeline: pipe
      to_cuds:
        - AluminiumMaterialCard_aiida_datanode
      from_cuds:
        - AluminiumMaterialCard_function_5_file
        - AbaqusConfiguration_function_4_file
      AluminiumMaterialCard_aiida_datanode: "{{ ctx.AluminiumMaterialCard_aiida_datanode }}"

    postprocess:
      - "{{ ctx.current.outputs.results['AluminiumMaterialCard_function_5_file']|to_ctx('ctx_material_file') }}"
      - "{{ ctx.current.outputs.results['AbaqusConfiguration_function_4_file']|to_ctx('ctx_abaqus_conf') }}"

  - workflow: execflow.exec_wrapper
    inputs:
      command: "run_abaqus.sh" # should be sh
      files:
        expand_input_file:
          template: "__DIR__/../../cli/expand_abaqusconf.py"
          filename: "expand_abaqusconf.py"
        material:
          node: "{{ ctx.ctx_material_file }}"
          filename: "Section_materials.inp"
        conf:
          node: "{{ ctx.ctx_abaqus_conf }}"
          filename: "abaqusconf.json"
      outputs:
        - "CementOutput.json"
    postprocess:
      # how do we know the identifier of the output?
      - "{{ ctx.current.outputs['CementOutput_json']|to_ctx('cement_output') }}"

  - workflow: execflow.oteapipipeline
    inputs:
      pipeline:
        $ref: file:__DIR__/../2_ontoconv/generated_pipeline_1.yaml
      run_pipeline: pipe
      to_cuds:
        - AbaqusDeformationHistory_aiida_datanode
      from_cuds:
        - cement_output_instance
      AbaqusDeformationHistory_aiida_datanode: "{{ ctx.cement_output }}"
